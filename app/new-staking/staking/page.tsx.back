// app/new-staking/staking/page.tsx
"use client";

import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { ChevronDown, Settings } from "lucide-react";
import { validTokens, Token } from "@/types/tokens";
import { StakingServiceProvider } from "@/components/new-staking/providers/StakingServiceProvider";
import { OperatorsProvider } from "@/components/new-staking/providers/OperatorsProvider";
import { useStakingServiceContext } from "@/contexts/StakingServiceContext";
import { WalletConnectionModal } from "@/components/new-staking/modals/WalletConnectionModal";
import { TokenSelectorModal } from "@/components/new-staking/modals/TokenSelectorModal";
import { StakeTab } from "@/components/new-staking/tabs/StakeTab";
import { DelegateTab } from "@/components/new-staking/tabs/DelegateTab";
import { UndelegateTab } from "@/components/new-staking/tabs/UndelegateTab";
import { WithdrawTab } from "@/components/new-staking/tabs/WithdrawTab";

type TabType = "stake" | "delegate" | "undelegate" | "withdraw";

// Main content component that uses the staking service
function StakingContent() {
  const [isWalletModalOpen, setIsWalletModalOpen] = useState(false);
  const [currentTab, setCurrentTab] = useState<TabType>("stake");
  
  const stakingService = useStakingServiceContext();
  const { connectionStatus, token } = stakingService;
  const isWalletConnected = connectionStatus.isReady;

  // Handle wallet connection
  const handleConnectWallet = () => {
    setIsWalletModalOpen(true);
  };

  const renderTabContent = () => {
    if (!isWalletConnected) {
      return (
        <div className="flex justify-center py-16">
          <button
            onClick={handleConnectWallet}
            className="bg-[#00e5ff] hover:bg-[#00c8df] text-black font-medium text-lg py-4 px-8 rounded-lg"
          >
            Connect Wallet
          </button>
        </div>
      );
    }

    switch (currentTab) {
      case "stake":
        return <StakeTab sourceChain="ethereum" destinationChain="imua" />;
      case "delegate":
        return <DelegateTab sourceChain="imua" destinationChain="imua" />;
      case "undelegate":
        return <UndelegateTab sourceChain="imua" destinationChain="imua" />;
      case "withdraw":
        return <WithdrawTab sourceChain="imua" destinationChain="ethereum" />;
    }
  };

  return (
    <>
      {/* Operation Tabs - Clean, minimal tab design with increased spacing */}
      <div className="mb-8">
        <div className="flex border-b border-[#222233]">
          {[
            { id: "stake", label: "Stake" },
            { id: "delegate", label: "Delegate" },
            { id: "undelegate", label: "Undelegate" },
            { id: "withdraw", label: "Withdraw" },
          ].map((tab) => (
            <button
              key={tab.id}
              className={`py-4 px-8 text-base font-medium ${
                currentTab === tab.id
                  ? "text-[#00e5ff] border-b-2 border-[#00e5ff]"
                  : "text-[#9999aa] hover:text-white"
              }`}
              onClick={() => setCurrentTab(tab.id as TabType)}
            >
              {tab.label}
            </button>
          ))}
        </div>
      </div>

      {/* Tab Content */}
      <AnimatePresence mode="wait">
        <motion.div
          key={currentTab}
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -10 }}
          transition={{ duration: 0.2 }}
          className="px-2" // Add some horizontal padding
        >
          {renderTabContent()}
        </motion.div>
      </AnimatePresence>

      {/* Wallet Connection Modal */}
      <WalletConnectionModal
        isOpen={isWalletModalOpen}
        onClose={() => setIsWalletModalOpen(false)}
        onSuccess={() => setIsWalletModalOpen(false)}
      />
    </>
  );
}

// Main page component
export default function StakingPage() {
  const [mounted, setMounted] = useState(false);
  const [selectedToken, setSelectedToken] = useState<Token>(validTokens[0]);
  const [isTokenSelectorOpen, setIsTokenSelectorOpen] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) return null;

  return (
    <div className="min-h-screen bg-[#0a0a0f]">
      {/* Larger header with more padding */}
      <header className="flex items-center justify-between px-8 py-5 border-b border-[#222233]">
        <div className="flex items-center">
          <img src="/imua-logo.avif" alt="Imua" className="h-8 mr-3" />
          <span className="text-white text-xl font-medium">Imua</span>
        </div>
        <button className="p-2.5 rounded-full hover:bg-[#222233]">
          <Settings size={24} className="text-[#9999aa]" />
        </button>
      </header>

      {/* Main content area - wider with more breathing room */}
      <div className="max-w-2xl mx-auto px-6 py-12">
        <div className="bg-[#13131a] rounded-3xl overflow-hidden shadow-xl">
          {/* Card header with token selector - more padding */}
          <div className="px-8 py-6 border-b border-[#222233]">
            <div className="flex items-center justify-between">
              <h2 className="text-2xl font-bold text-white">Stake Assets</h2>
              <button
                onClick={() => setIsTokenSelectorOpen(true)}
                className="flex items-center px-4 py-3 bg-[#222233] hover:bg-[#2a2a3a] rounded-xl text-white"
              >
                <img src={selectedToken.iconUrl} alt={selectedToken.symbol} className="w-6 h-6 mr-3" />
                <span className="font-medium text-base">{selectedToken.symbol}</span>
                <ChevronDown size={20} className="ml-3 text-[#9999aa]" />
              </button>
            </div>
          </div>

          {/* Card body with staking content - more padding */}
          <div className="p-8">
            <StakingServiceProvider token={selectedToken}>
              <OperatorsProvider>
                <StakingContent />
              </OperatorsProvider>
            </StakingServiceProvider>
          </div>
        </div>
      </div>

      {/* Token Selector Modal */}
      <TokenSelectorModal
        isOpen={isTokenSelectorOpen}
        onClose={() => setIsTokenSelectorOpen(false)}
        tokens={validTokens}
        selectedToken={selectedToken}
        onSelectToken={(token) => {
          setSelectedToken(token);
          setIsTokenSelectorOpen(false);
        }}
      />
    </div>
  );
}